{"version":3,"sources":["components/Humidy/index.js","components/Wind/index.js","components/Title/index.js","components/Temperature/index.js","components/Pressure/index.js","components/Sky/index.js","components/Search/index.js","App/index.js","serviceWorker.js","index.js"],"names":["Humidy","_ref","humidity","react_default","a","createElement","className","Wind","speed","deg","arrowStyle","transform","concat","style","ContentTitle","location","class","Date","toLocaleString","Temperature","celsius","fahrenheit","Pressure","pressure","Clouds","clouds","icon","src","alt","SearchLocation","handleChange","locations","handleClick","show","htmlFor","id","onChange","value","type","display","map","loc","key","onClick","lat","lon","name","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentLocation","hideList","err","fetchData","bind","assertThisInitialized","setLocation","request","_this2","navigator","geolocation","watchPosition","position","coords","latitude","longitude","_this3","axios","get","then","res","data","region","country","setState","current","condition","temp_c","temp_f","text","pressure_mb","windSpeed","wind_kph","windDeg","wind_degree","console","log","catch","event","_this4","target","_this$state","components_Search","Title","components_Sky","src_components_Temperature","components_Humidy","components_Pressure","components_Wind","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ecd7b467.chunk.js","sourcesContent":["import React from 'react';\n\nconst Humidy = ({humidity}) => {\n  return (\n    <div className='humidity'>\n      Вологість: {humidity} %\n    </div>\n  );\n};\n\nexport default Humidy;","import React from 'react';\n\nconst Wind = ({speed, deg}) => {\n\tconst arrowStyle = {\n\t\ttransform: `rotate(${deg}deg)`,\n\t};\n  \treturn (\n    <div className='wind'>\n      \tВітер: {speed} m/s,\n      \t<span style={arrowStyle}>&#8593;</span>\n      \t\n    </div>\n  );\n};\n\nexport default Wind;","import React from 'react';\n\nconst ContentTitle = ({location}) => {\n  return (\n    <div className=\"app-main__title\">\n    \t<div class='bold grey'>{location}</div>\n      \t<div class='grey'>{new Date().toLocaleString()}</div>\n    </div>\n  );\n};\n\nexport default ContentTitle;\n","import React from 'react';\nimport './index.css';\nconst Temperature = ({celsius, fahrenheit}) => {\n  return (\n    <div className='temp'>\n      <div className='temp-value'>\n      \t<span className='bold grey'>{celsius}</span>\n      \t<sup>o</sup>C\n      </div>\n      <div className='temp-value'>\n      \t<span className='bold grey'>{fahrenheit}</span>\n      \t<sup>o</sup>F\n      </div>  \n    </div>\n  );\n};\n\nexport default Temperature;\n","import React from 'react';\n\n\nconst Pressure = ({pressure}) => {\n  return (\n    <div className='pressure'>\n      Тиск: {pressure} mbar\n    </div>\n  );\n};\n\nexport default Pressure;","import React from 'react';\nimport './index.css';\n\nconst Clouds = ({clouds, icon}) => {\n  return (\n  \t<div>\n  \t\t<div className='sky'>\n  \t\t  {clouds}\n  \t\t</div>\n  \t\t{\n  \t\t\ticon ? \n  \t\t\t<img className='sky-img' src={icon} alt=''/>\n  \t\t\t: ''\n  \t\t}\n    </div>\n  );\n};\n\nexport default Clouds;","import React from 'react';\nimport './index.css';\n\nconst SearchLocation = ({handleChange, location, locations, handleClick, show}) => {\n\treturn (\n\t\t<div className='searchLocations'>\n            <label className='searchLocations-label' htmlFor='s'>Дізнайтесь погоду у вашому місті:\n            </label>\n            <input id='s' onChange={handleChange} value={location} className='searchLocations-input' type='text' />\n            {locations ? \n               <ul style={{display: show}} className='searchLocations-list'>\n                {\n                  locations.map((loc) => {\n                  return (\n                    <li \n                      key={loc.id}\n                      className='searchLocations-list__item' \n                      onClick={() => handleClick(loc.lat, loc.lon)}\n                    >{loc.name}\n                    </li>\n                  );\n                })}\n              </ul>\n              : null\n            }\n        </div>\n\t);\n}\nexport default SearchLocation;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './index.css';\n\nimport Humidy from '../components/Humidy';\nimport Wind from '../components/Wind';\nimport Title from '../components/Title';\nimport Temperature from '../components/Temperature';\nimport Pressure from '../components/Pressure';\nimport Sky from '../components/Sky';\nimport Search from '../components/Search';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: '',\n      currentLocation: '',\n      locations: [],\n      hideList: true,\n      err: null,\n      show: 'none',\n    }\n    this.fetchData = this.fetchData.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.setLocation = this.setLocation.bind(this);\n    this.request = this.request.bind(this);\n\n  }\n  componentDidMount() {\n    this.fetchData();\n  }\n  fetchData() {\n    navigator.geolocation.watchPosition((position) => {\n      const lat = position.coords.latitude,\n            lon = position.coords.longitude;\n      this.request(lat, lon);\n    });\n    \n  }\n  request(lat, lon) {\n    axios.get(`http://api.apixu.com/v1/forecast.json?key=e4c6948631f64f6f921180503191704&q=${lat},${lon}&days=5&lang=uk`)\n      .then(res => {\n        const location = `${res.data.location.name},${res.data.location.region},${res.data.location.country}`;\n        this.setState({\n          location,\n          currentLocation: location,\n          icon: res.data.current.condition.icon,\n          celsius: res.data.current.temp_c,\n          fahrenheit: res.data.current.temp_f,\n          clouds: res.data.current.condition.text,\n          humidity: res.data.current.humidity,\n          pressure: res.data.current.pressure_mb,\n          windSpeed: res.data.current.wind_kph,\n          windDeg: res.data.current.wind_degree,\n        });\n        console.log(res)\n      })\n      .catch(err => this.setState({err}));   \n  }\n  setLocation(lat, lon) {\n    this.request(lat, lon);\n    this.setState({show: 'none'}); \n  }\n  handleChange(event) {\n    this.setState({\n      show: 'block',\n      currentLocation: event.target.value\n    });\n    axios.get(`http://api.apixu.com/v1/search.json?key=e4c6948631f64f6f921180503191704&q=${this.state.currentLocation}&lang=uk`)\n      .then(res => this.setState({locations: res.data}))\n      .catch(err => this.setState({err}));\n  } \n  render() {\n    const {location, currentLocation, icon, celsius, fahrenheit, clouds, humidity, pressure, windSpeed, windDeg, err, show} = this.state;\n    const locations = this.state.locations;\n    return (\n      <div className=\"app\">\n        <div>\n          <Search \n            handleChange={this.handleChange}\n            location={currentLocation}\n            locations={locations}\n            handleClick={this.setLocation}\n            show={show}\n          />\n          {location ? \n          <div className=\"app-main\">\n            <Title location={location} />\n            \n            <div className=\"app-main__content\">\n              <div className=\"app-main__content-main\">\n                <Sky clouds={clouds} icon={icon} />\n                <Temperature \n                  celsius={celsius}\n                  fahrenheit={fahrenheit} \n                />\n                \n              </div>\n              <div className=\"app-main__content-additional\">\n                <Humidy humidity={humidity} />\n                <Pressure pressure={pressure} />\n                <Wind speed={windSpeed} deg={windDeg} />\n              </div>\n            </div>\n          </div>\n          : err ? 'От халепа...щось пішло не так :(' : 'Отримання даних...Будь ласка зачекайте'}\n          </div>\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nif (module.hot) {\n\tmodule.hot.accept();\n}"],"sourceRoot":""}